#library
from datetime import datetime
from datetime import date
import imp
from pickle import GLOBAL
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import text, bold, italic, code, pre, hide_link
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo
import shutil

from pathlib import Path

import os
import sys

import re

import threading

import mysql.connector


# module

sys.path.insert(1,os.path.join(sys.path[0],'..'))
from Pars import sbazar
from Pars import wallpop_es
from Pars import vinted_pl_asyn
from Pars import vinted_it_asyn
from Pars import vinted_nl
from Pars import md999_async
import Information
import asyncio
import Button

import CheckRegToBot

import telebot
bot = Bot(token=Information.token)
dp = Dispatcher(bot)



#/start
@dp.message_handler(commands=['start'])
async def start(message : types.Message):
   ID = message.from_user.id

   
   cursor.execute('SELECT `ID` FROM check_user_id WHERE id = "'+str(message.from_user.id)+'" ;')
   info = cursor.fetchall()
   if info != []:
      if CheckRegToBot.User_Register(ID,db,cursor) == None:
         db.reconnect()
         cursor.execute('INSERT INTO `id_users` (`ID`) VALUES  ("'+str(message.from_user.id)+'") ;')
         db.commit()       
         cursor.execute('INSERT INTO `users_data` (`ID`,`Obyav`,`Prosmotru`,`text`,`UserName`) VALUES ( "'+str(message.from_user.id)+'","'+str("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ")+'" ,"'+str("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ")+'" , "'+str("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ")+'","'+str(message.from_user.username)+'") ;')
         db.commit()
         if ID not in Information.user_admin:
            await bot.send_message(message.from_user.id, "<b>üëã –ü—Ä–∏–≤–µ—Å—Ç–≤—É—é  </b>"+message.from_user.first_name, reply_markup=Button.menu_users  , parse_mode=ParseMode.HTML)
            await bot.send_message(message.from_user.id, "<b>‚ö†Ô∏è\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–æ—Ä–∫ –ø–∏—à–∏—Ç–µ - @Nuu8rs</b>"  , parse_mode=ParseMode.HTML)
         else:
            await bot.send_message(message.from_user.id, "<b>üëã –ü—Ä–∏–≤–µ—Å—Ç–≤—É—é  </b>"+message.from_user.first_name, reply_markup=Button.menu_users_adm  , parse_mode=ParseMode.HTML)
            await bot.send_message(message.from_user.id, "<b>‚ö†Ô∏è\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–æ—Ä–∫ –ø–∏—à–∏—Ç–µ - @Nuu8rs</b>"  , parse_mode=ParseMode.HTML)
      else:
         if ID not in Information.user_admin:
            await bot.send_message(message.from_user.id, "<b>üëã –ü—Ä–∏–≤–µ—Å—Ç–≤—É—é  </b>"+message.from_user.first_name, reply_markup=Button.menu_users  , parse_mode=ParseMode.HTML)
            await bot.send_message(message.from_user.id, "<b>‚ö†Ô∏è\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–æ—Ä–∫ –ø–∏—à–∏—Ç–µ - @Nuu8rs</b>" , parse_mode=ParseMode.HTML)
         else:
            await bot.send_message(message.from_user.id, "<b>üëã –ü—Ä–∏–≤–µ—Å—Ç–≤—É—é  </b>"+message.from_user.first_name, reply_markup=Button.menu_users_adm  , parse_mode=ParseMode.HTML)
            await bot.send_message(message.from_user.id, "<b>‚ö†Ô∏è\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–æ—Ä–∫ –ø–∏—à–∏—Ç–µ - @Nuu8rs</b>", parse_mode=ParseMode.HTML)
   else:
      await bot.send_message(message.from_user.id, "<b>–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞—Ä—Å–µ—Ä—É</b>", parse_mode=ParseMode.HTML)
    

@dp.message_handler()
async def obrabotka(message: types.Message):
   try:
      current_datetime = datetime.now()

      #adm_panel
      if message.text =="üî± –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
         await bot.send_message(message.from_user.id, "‚ûñ‚ûñ–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚ûñ‚ûñ", reply_markup=Button.adm_user)

      #error
      if message.text == "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ":
         await bot.send_message(message.from_user.id, "<b>ü™ì –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –æ—à–∏–±–∫–∏ , –º—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–∏–º –µ–µ</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[message.from_user.id] = "Error"

      #settings
      if message.text == "üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è":
         db.reconnect()
         cursor.execute('SELECT `Obyav`,`Prosmotru`,`text` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
         information_user = cursor.fetchall()
         await bot.send_message(message.from_user.id, "<b>üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è üîó</b>\n\n<b>ü´µüèø –¢–≤–æ–π id: <code>{}</code></b>\n<b>üßø –ö–æ–ª-–≤–æ –æ–±—å—è–≤: <code>{}</code></b>\n<b>üëÅ‚Äçüó® –ö–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <code>{}</code></b>\n\n<b>üíæ –¢–µ–∫—Å—Ç –≤–æ—Ç—Å–∞: <code>{}</code></b>".format(message.from_user.id ,information_user[0][0] ,information_user[0][1] ,information_user[0][2] ), reply_markup=Button.Butt_pars  , parse_mode=ParseMode.HTML)
    
      #// Parsing 
      if message.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—å—è–≤–ª–µ–Ω–∏–π":
         Information.arr_stop[message.from_user.id] = "False"
         await asyncio.sleep(1.2) 
         if message.from_user.id not in Information.user_admin:
            await bot.send_message(message.from_user.id, "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—å—è–≤–ª–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–µ–Ω", reply_markup=Button.menu_users)
         else:
            await bot.send_message(message.from_user.id, "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—å—è–≤–ª–µ–Ω–∏–π –∑–∞–∫–æ–Ω—á–µ–Ω", reply_markup=Button.menu_users_adm)
         Information.active_use_pars.remove(message.from_user.id)
         try:
            os.remove("photo_{}.png".format(message.from_user.id))
            os.remove("result_{}.json".format(id))  
         except:
            pass

      if message.text == "üñá –ü–∞—Ä—Å–∏—Ç—å":
         if message.from_user.id not in Information.active_use_pars: 
            await bot.send_message(message.from_user.id, "<b>üåê –í—ã–±–µ—Ä–µ—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø–∞—Ä—Å–∞</b>", reply_markup=Button.pars_choise_but , parse_mode=ParseMode.HTML)   
            
         else:
            await bot.send_message(message.from_user.id, "<b>‚ùå –í—ã —Å–µ–π—á–∞—Å –∏ —Ç–∞–∫ –ø–∞—Ä—Å–∏—Ç–µ , –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–∞—Ä—Å –∑–∞–∫–æ–Ω—á–∏—Ç —Ä–∞–±–æ—Ç—É</b>" , parse_mode=ParseMode.HTML)   

      if Information.arr_users[message.from_user.id] == "Link_pars_sbazar":
         if "https://www.sbazar.cz/" in message.text:
            await bot.send_message(message.from_user.id, "<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Å—ã–ª–∫–µ: <code>{}</code> –Ω–∞—á–∞–ª—Å—è</b>".format(message.text), reply_markup=Button.stop_pars , parse_mode=ParseMode.HTML)  
            #execute information
            db.reconnect()
            cursor.execute('SELECT `text` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()
            id,link,text = message.from_user.id, message.text,information_user[0][0]
            Information.active_use_pars.append(message.from_user.id)
            Information.arr_stop[id] = "True"
            await bot.send_message(-1001626222956,"<b>Time</b> - {}/{}:{}\n<b>id user</b> - <code>{}</code>\n<b>username</b> - @{}\n\n<b>Start parsing</b> - {}".format(date.today(),current_datetime.hour,current_datetime.minute,id,message.from_user.username,link), parse_mode=ParseMode.HTML)
            #start thread
            Pars_flow = threading.Thread(target=sbazar.sbazar_pars , args=(link,id,Information.arr_stop,text,Information.active_use_pars))
            Pars_flow.start()

      if Information.arr_users[message.from_user.id] == "Link_pars_wallpop_es":
         if "es.wallapop.com" in message.text:
            #execute information
            db.reconnect()
            cursor.execute('SELECT `Obyav`,`Prosmotru` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()            
            await bot.send_message(message.from_user.id, "<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Å—ã–ª–∫–µ: <code>{}</code> –Ω–∞—á–∞–ª—Å—è</b>".format(message.text), reply_markup=Button.stop_pars  , parse_mode=ParseMode.HTML)  
            id,link,obv,pros = message.from_user.id, message.text,information_user[0][0],information_user[0][1]
            # if user settings = None
            if obv == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               obv = 10000
            if pros == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               pros = 1000
            #append information to arr
            Information.active_use_pars.append(message.from_user.id)
            Information.arr_stop[id] = "True"
            #await bot.send_message(-1001626222956,"<b>Time</b> - {}/{}:{}\n<b>id user</b> - <code>{}</code>\n<b>username</b> - @{}\n\n<b>Start parsing</b> - {}".format(date.today(),current_datetime.hour,current_datetime.minute,id,message.from_user.username,link), parse_mode=ParseMode.HTML)
            #start thread
            Pars_flow = threading.Thread(target=wallpop_es.wallpop_es_pars , args=(link,id,Information.arr_stop,obv,pros,Information.active_use_pars))
            Pars_flow.start()

      if Information.arr_users[message.from_user.id] == "Link_pars_vinted_it":
         if "vinted.it" in message.text:
            #execute information
            db.reconnect()
            cursor.execute('SELECT `Obyav`,`Prosmotru` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()            
            await bot.send_message(message.from_user.id, "<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Å—ã–ª–∫–µ: <code>{}</code> –Ω–∞—á–∞–ª—Å—è</b>".format(message.text), reply_markup=Button.stop_pars  , parse_mode=ParseMode.HTML)  
            id,link,obv,pros = message.from_user.id, message.text,information_user[0][0],information_user[0][1]
            # if user settings = None
            if obv == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               obv = 10000
            if pros == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               pros = 1000
            #append information to arr
            Information.active_use_pars.append(message.from_user.id)
            Information.arr_stop[id] = "True"
            #await bot.send_message(-1001626222956,"<b>Time</b> - {}/{}:{}\n<b>id user</b> - <code>{}</code>\n<b>username</b> - @{}\n\n<b>Start parsing</b> - {}".format(date.today(),current_datetime.hour,current_datetime.minute,id,message.from_user.username,link), parse_mode=ParseMode.HTML)
            #start thread
            Pars_flow = threading.Thread(target=vinted_pl_asyn.vinted_it_pars , args=(link,id,Information.arr_stop,obv,pros,Information.active_use_pars))
            Pars_flow.start()
      if Information.arr_users[message.from_user.id] == "Link_pars_vinted_pl":
         if "vinted.pl" in message.text:
            #execute information
            db.reconnect()
            cursor.execute('SELECT `Obyav`,`Prosmotru` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()            
            await bot.send_message(message.from_user.id, "<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Å—ã–ª–∫–µ: <code>{}</code> –Ω–∞—á–∞–ª—Å—è</b>".format(message.text), reply_markup=Button.stop_pars  , parse_mode=ParseMode.HTML)  
            id,link,obv,pros = message.from_user.id, message.text,information_user[0][0],information_user[0][1]
            # if user settings = None
            if obv == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               obv = 10000
            if pros == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               pros = 1000
            #append information to arr
            Information.active_use_pars.append(message.from_user.id)
            Information.arr_stop[id] = "True"
            await bot.send_message(-1001626222956,"<b>Time</b> - {}/{}:{}\n<b>id user</b> - <code>{}</code>\n<b>username</b> - @{}\n\n<b>Start parsing</b> - {}".format(date.today(),current_datetime.hour,current_datetime.minute,id,message.from_user.username,link), parse_mode=ParseMode.HTML)
            #start thread
            Pars_flow = threading.Thread(target=vinted_it_asyn.vinted_pl_pars , args=(link,id,Information.arr_stop,obv,pros,Information.active_use_pars))
            Pars_flow.start()    
      if Information.arr_users[message.from_user.id] == "Link_pars_vinted_nl":
         if "vinted.nl" in message.text:
            #execute information
            db.reconnect()
            cursor.execute('SELECT `Obyav`,`Prosmotru` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()            
            await bot.send_message(message.from_user.id, "<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Å—ã–ª–∫–µ: <code>{}</code> –Ω–∞—á–∞–ª—Å—è</b>".format(message.text), reply_markup=Button.stop_pars  , parse_mode=ParseMode.HTML)  
            id,link,obv,pros = message.from_user.id, message.text,information_user[0][0],information_user[0][1]
            # if user settings = None
            if obv == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               obv = 10000
            if pros == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               pros = 1000
            #append information to arr
            Information.active_use_pars.append(message.from_user.id)
            Information.arr_stop[id] = "True"
            #await bot.send_message(-1001626222956,"<b>Time</b> - {}/{}:{}\n<b>id user</b> - <code>{}</code>\n<b>username</b> - @{}\n\n<b>Start parsing</b> - {}".format(date.today(),current_datetime.hour,current_datetime.minute,id,message.from_user.username,link), parse_mode=ParseMode.HTML)
            #start thread
            Pars_flow = threading.Thread(target=vinted_nl.vinted_nl_pars , args=(link,id,Information.arr_stop,obv,pros,Information.active_use_pars))
            Pars_flow.start()     

      if Information.arr_users[message.from_user.id] == "Link_pars_md999":
         if "999.md" in message.text:
            #execute information
            db.reconnect()
            cursor.execute('SELECT `Obyav`,`Prosmotru`,`text` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()            
            await bot.send_message(message.from_user.id, "<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Å—ã–ª–∫–µ: <code>{}</code> –Ω–∞—á–∞–ª—Å—è</b>".format(message.text), reply_markup=Button.stop_pars  , parse_mode=ParseMode.HTML)  
            id,link,obv,pros,text = message.from_user.id, message.text,information_user[0][0],information_user[0][1],information_user[0][2]
            # if user settings = None
            if obv == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               obv = 10000
            if pros == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ":
               pros = 1000
            #append information to arr
            Information.active_use_pars.append(message.from_user.id)
            Information.arr_stop[id] = "True"
            if "m.999.md" in link:
               link = link.replace("m.",'')
            await bot.send_message(-1001626222956,"<b>Time</b> - {}/{}:{}\n<b>id user</b> - <code>{}</code>\n<b>username</b> - @{}\n\n<b>Start parsing</b> - {}".format(date.today(),current_datetime.hour,current_datetime.minute,id,message.from_user.username,link), parse_mode=ParseMode.HTML)
            #start thread
            Pars_flow = threading.Thread(target=md999_async.main ,name=f"md999_{id}", args=(link,id,Information.arr_stop,obv,pros,Information.active_use_pars,text))
            Pars_flow.start()                

      #// Ad setting
      if Information.arr_users[message.from_user.id] == "Obv":
         if type(int(message.text))  == int:
            db.reconnect()
            cursor.execute("UPDATE `users_data` SET `Obyav` = '"+str(message.text)+"' WHERE `ID` LIKE '"+str(message.from_user.id)+"' ;")
            db.commit()
            Information.arr_users[message.from_user.id] == None
            cursor.execute('SELECT `Obyav`,`Prosmotru`,`text` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()
            await bot.send_message(message.from_user.id, "<b>üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è üîó</b>\n\n<b>ü´µüèø –¢–≤–æ–π id: <code>{}</code></b>\n<b>üßø –ö–æ–ª-–≤–æ –æ–±—å—è–≤: <code>{}</code></b>\n<b>üëÅ‚Äçüó® –ö–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <code>{}</code></b>\n\n<b>üíæ –¢–µ–∫—Å—Ç –≤–æ—Ç—Å–∞: <code>{}</code></b>".format(message.from_user.id ,information_user[0][0] ,information_user[0][1] ,information_user[0][2] ), reply_markup=Button.Butt_pars  , parse_mode=ParseMode.HTML)
            Information.arr_users[message.from_user.id] = None
         else:
            await bot.send_message(message.from_user.id, "<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>" , parse_mode=ParseMode.HTML)   

      if Information.arr_users[message.from_user.id] == "Pros":
         if type(int(message.text))  == int:
            db.reconnect()
            cursor.execute("UPDATE `users_data` SET `Prosmotru` = '"+str(message.text)+"' WHERE `ID` LIKE '"+str(message.from_user.id)+"' ;")
            db.commit()
            Information.arr_users[message.from_user.id] == None
            cursor.execute('SELECT `Obyav`,`Prosmotru`,`text` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
            information_user = cursor.fetchall()
            await bot.send_message(message.from_user.id, "<b>üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è üîó</b>\n\n<b>ü´µüèø –¢–≤–æ–π id: <code>{}</code></b>\n<b>üßø –ö–æ–ª-–≤–æ –æ–±—å—è–≤: <code>{}</code></b>\n<b>üëÅ‚Äçüó® –ö–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <code>{}</code></b>\n\n<b>üíæ –¢–µ–∫—Å—Ç –≤–æ—Ç—Å–∞: <code>{}</code></b>".format(message.from_user.id ,information_user[0][0] ,information_user[0][1] ,information_user[0][2] ), reply_markup=Button.Butt_pars  , parse_mode=ParseMode.HTML)
            Information.arr_users[message.from_user.id] = None
         else:
            await bot.send_message(message.from_user.id, "<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>" , parse_mode=ParseMode.HTML)    

      if Information.arr_users[message.from_user.id] == "Text":
         db.reconnect()
         cursor.execute("UPDATE `users_data` SET `Text` = '"+str(message.text)+"' WHERE `ID` LIKE '"+str(message.from_user.id)+"' ;")
         db.commit()
         Information.arr_users[message.from_user.id] == None
         cursor.execute('SELECT `Obyav`,`Prosmotru`,`text` FROM users_data WHERE id = "'+str(message.from_user.id)+'" ;')
         information_user = cursor.fetchall()
         await bot.send_message(message.from_user.id, "<b>üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è üîó</b>\n\n<b>ü´µüèø –¢–≤–æ–π id: <code>{}</code></b>\n<b>üßø –ö–æ–ª-–≤–æ –æ–±—å—è–≤: <code>{}</code></b>\n<b>üëÅ‚Äçüó® –ö–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <code>{}</code></b>\n\n<b>üíæ –¢–µ–∫—Å—Ç –≤–æ—Ç—Å–∞: <code>{}</code></b>".format(message.from_user.id ,information_user[0][0] ,information_user[0][1] ,information_user[0][2] ), reply_markup=Button.Butt_pars  , parse_mode=ParseMode.HTML)
         Information.arr_users[message.from_user.id] = None

      if Information.arr_users[message.from_user.id] == "Error" and message.text != "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –æ—à–∏–±–∫–µ" and message.text != "üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è" and message.text != "üî± –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" :
         await bot.send_message(-1001761872781, "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> : @{}\n \n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–±–∏–∫–∏</b> : {}".format(message.from_user.username,message.text) , parse_mode=ParseMode.HTML)
         await bot.send_message(message.from_user.id, "<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ</b>" , parse_mode=ParseMode.HTML)
         Information.arr_users[message.from_user.id] = None
      
      if Information.arr_users[message.from_user.id] == "addtouser":
         try:
            if type(int(message.text)) == int:
               db.reconnect()
               cursor.execute('INSERT INTO `check_user_id` (`ID`) VALUES  ("'+str(message.text)+'") ;')
               db.commit()   
               await bot.send_message(message.from_user.id, "<b>‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω</b>".format(message.from_user.id), reply_markup=Button.adm_user , parse_mode=ParseMode.HTML)
               Information.arr_users[message.from_user.id] = None
         except:
            pass

      if Information.arr_users[message.from_user.id] == "deletetouser":
         try:
            if type(int(message.text)) == int:
               db.reconnect()
               cursor.execute("DELETE FROM check_user_id where ID  = '" + str(message.text) + "';")
               db.commit()   
               await bot.send_message(message.from_user.id, "<b>‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –±—ã–ª —É–¥–∞–ª–µ–Ω</b>".format(message.from_user.id) , reply_markup=Button.adm_user, parse_mode=ParseMode.HTML)
               Information.arr_users[message.from_user.id] = None
         except:
            pass

      if Information.arr_users[message.from_user.id] == "send_text":
         db.reconnect()
         cursor.execute('SELECT `ID` FROM users_data ;')
         id_users = cursor.fetchall()
         for id_user in id_users:
            try:
               await bot.send_message(id[0], f"<b>{message.text}</b>" , reply_markup=Button.adm_user, parse_mode=ParseMode.HTML)
            except:
               pass

   except Exception as E:
      print(E)
      pass


@dp.callback_query_handler()
async def obs4et_kategorii(call: types.CallbackQuery):
   try:
      #// Callb Settings
      callb = call.data
      if callb == "add_user":
         await call.message.edit_text("<b>‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è , –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "addtouser"
      
      if callb == "delete_user":
         await call.message.edit_text("<b>‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è , –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "deletetouser"

      if callb == "send_message_all_users":
         await call.message.edit_text("<b>‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "send_text"         



      if callb == "Text":
         await call.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Ç—Å–∞–ø–∞</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Text"
#PARS
      if callb == "sbazar":
         await call.message.edit_text("‚û°Ô∏è‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚¨ÖÔ∏è\n\n‚ùå –ù–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—à–∞–¥–∫–µ –Ω–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>\n‚ùå –ù–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—à–∞–¥–∫–µ –Ω–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ <b>–æ–±—å—è–≤–ª–µ–Ω–∏–π —É –∞–≤—Ç–æ—Ä–∞</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ cc—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∞\n–ü—Ä–∏–º–µ—Ä : https://www.sbazar.cz/29-detsky-bazar</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Link_pars_sbazar"

      if callb == "md999":
         await call.message.edit_text("‚û°Ô∏è‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚¨ÖÔ∏è\n\n<b>–í–≤–µ–¥–∏—Ç–µ cc—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∞\n–ü—Ä–∏–º–µ—Ä : https://999.md/ru/list/furniture-and-interior/upholstery</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Link_pars_md999"

      if callb == "wallpop_es":
         await call.message.edit_text("‚û°Ô∏è‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚¨ÖÔ∏è\n\n‚ùå –ù–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—à–∞–¥–∫–µ –Ω–µ—Ç <b>–Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ cc—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∞\n–ü—Ä–∏–º–µ—Ä : https://es.wallapop.com/otros</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Link_pars_wallpop_es"   

      if callb == "vinted_it":
         await call.message.edit_text("‚û°Ô∏è‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚¨ÖÔ∏è\n\n‚ùå –ù–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—à–∞–¥–∫–µ –Ω–µ—Ç <b>–Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ cc—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∞\n–ü—Ä–∏–º–µ—Ä : https://www.vinted.it/vetements?search_text=iphone&search_id=6295293111&time=1662186927</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Link_pars_vinted_it"   

      if callb == "vinted_pl":
         await call.message.edit_text("‚û°Ô∏è‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚¨ÖÔ∏è\n\n‚ùå –ù–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—à–∞–¥–∫–µ –Ω–µ—Ç <b>–Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ cc—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∞\n–ü—Ä–∏–º–µ—Ä : https://www.vinted.pl/vetements?search_text=iphone&search_id=6295293111&time=1662186927</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Link_pars_vinted_pl"      

      if callb == "vinted_nl":
         await call.message.edit_text("‚û°Ô∏è‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚¨ÖÔ∏è\n\n‚ùå –ù–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—à–∞–¥–∫–µ –Ω–µ—Ç <b>–Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ cc—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∞\n–ü—Ä–∏–º–µ—Ä : https://www.vinted.nl/vetements?search_text=iphone&search_id=6295293111&time=1662186927</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Link_pars_vinted_nl"                 
#---
      if callb == "Obv":
         await call.message.edit_text("<b>‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—å—è–≤–ª–µ–Ω–∏–π —É –∞–≤—Ç–æ—Ä–∞</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Obv" 

      if callb == "Pros":
         await call.message.edit_text("<b>‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –æ–±—å—è–≤–ª–µ–Ω–∏–µ</b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Pros"

      if callb == "Text":
         await call.message.edit_text("<b>‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Ç—Å–∞–ø–∞ , –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≤–æ—Ç—Å</b>\n\n‚öôÔ∏è <b>–ß—Ç–æ–±—ã —Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ: <code>-—Å—Å—ã–ª–∫–∞-</code></b>\n\n<b>–ü—Ä–∏–º–µ—Ä : <code>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ -—Å—Å—ã–ª–∫–∞- –∞–∫—Ç—É–∞–ª—å–Ω–æ?</code></b>", parse_mode=ParseMode.HTML)
         Information.arr_users[call.message.chat.id] = "Text"                
   except Exception as E:
      print({E})


if __name__ == '__main__':
   config = {                                     
         'user': 'Nursyka',                     
         'password': '3y@CB%8D)sNkv56!Bj+9',         
         'host': 'DESKTOP-S95L17M',                
         'port': '3306',                    
         'database': "parsfl",                  
               }
   print("Connect SQL Done")                                  
   db = mysql.connector.connect(**config)  
   cursor = db.cursor()   
   executor.start_polling(dp)